from json import load
from datetime import datetime
from time import time

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import core.searching_answers as core

with open("src/package/client.json", "r") as telegram_data:
    data = load(telegram_data)
bot = Bot(token=data["telegram_token"])
client = Dispatcher(bot)
admin_id = [489951151, 857280061]
id_users = [857280061, 612533221, 489951151, 487829634,
            864661061, 979792282, 915175634, 714979445, 689676294, 673645391, 1613440653, 507109434]


def analytics(message: types.Message):
    with open('analytics.txt', '+r') as user_id:
        if str(message.from_user.id) not in user_id.read():
            user_id.write(f'{message.from_user.id, message.from_user.username}\n')


def post(message: types.Message):
    if 'all' not in message.text:
        post_text = message.text.replace('post ', '').split(' ')
        user_id = post_text[0]
        final_text = ''
        for text in post_text:
            final_text += f'{text} '
        return user_id, final_text.replace(user_id, '')


@client.message_handler(commands=["start", "help", "—Ö–µ–ª–ø", "–ø–æ–º–æ—â—å", "–≥–∞–π–¥"])
async def manual(msg: types.Message):
    with open("src/package/client_lock.json", "r") as file:
        sys = load(file)
    await msg.answer(f"""üëã–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}.\n
‚ùó–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã.\nüìù–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: {sys['example']}\n
‚ö†Ô∏è–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º–∞, –æ—à–∏–±–∫–∞, –±–∞–≥ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏üë®üèº‚Äçüîß: {sys['help_place']}.
–¢–∞–º –í–∞–º –ø–æ–º–æ–≥—É—Ç —Å —Å–ª–æ–∂–∏–≤—à–µ–π—Å—è —Å–∏—Ç—É–∞—Ü–∏–µ–π.üéØ\n
üíØ–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –º–µ–Ω—è –æ—Ü–µ–Ω–∏—Ç—å,\n –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –æ—Ü–µ–Ω–∫—Éüëá\n
ü§ñ–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 3Ô∏è‚É£.0Ô∏è‚É£
ü™Ñ–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {sys['link']}
üìå–í–ö —Å–æ–∑–¥–∞—Ç–µ–ª—è: {sys['vk']}""")
    analytics(msg)


@client.message_handler(commands=['admin', 'analytics'])
async def admin(msg: types.Message):
    with open("analytics.txt", "r") as analytic:
        if msg.from_user.id in admin_id:
            counter = 0
            for number, id_user in enumerate(analytic.readlines()):
                await msg.answer(f'{number + 1}. User: {id_user}')
                counter += 1
            await msg.answer(f'üôà–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counter}')
        else:
            await msg.answer("‚ö†Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Ä–µ—à–∏—Ç—å.ü§°")


@client.message_handler(content_types=["text"])
async def get_text_messages(msg: types.Message):
    if msg.text.startswith("http"):
        try:
            start_time = time()
            answers = core.get_answers(link=msg.text)
            await msg.answer("üëΩ–ù–∞—á–∞–ª —Ä–µ—à–∞—Ç—å...") if answers else None
            for task_number, task in enumerate(answers):
                await msg.answer(f"‚úè–í–æ–ø—Ä–æ—Å ‚Ññ{task_number + 1}: {task[0]}\n\n‚úÖ–û—Ç–≤–µ—Ç: {task[1]}")
            await msg.answer(f"‚è≥–†–µ—à–µ–Ω–æ –∑–∞ {'%s —Å–µ–∫—É–Ω–¥' % round((time() - start_time), 1)}")
        except:
            await msg.answer('‚ö†Ô∏è–•–º —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ üëâ/helpüëà')

    elif 'post all' in msg.text and msg.from_user.id == admin_id[0]:
        post_text = msg.text.replace('post ', '').replace('all ', '')
        for user in id_users:
            await bot.send_message(user, post_text)
    elif 'post' in msg.text and msg.from_user.id in admin_id:
        user_id, final_text = post(msg)
        await bot.send_message(user_id, final_text)

    elif msg.text.isdigit():
        await msg.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—Éüòä')

    else:
        await msg.answer("‚ö†Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Ä–µ—à–∏—Ç—å.üõ∏")

    info = f'Text: {msg.text}\nUser: {msg.from_user.get_user_profile_photos}'
    await bot.send_message(admin_id[0], info)
    analytics(msg)


if __name__ == "__main__":
    print(f"Connected at {datetime.today().strftime('%H:%M, %d-%m-%Y')}")
    executor.start_polling(client)
